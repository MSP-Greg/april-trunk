diff --git a/spec/ruby/library/win32ole/win32ole/_getproperty_spec.rb b/spec/ruby/library/win32ole/win32ole/_getproperty_spec.rb
index 201fac9940..afb4b4de77 100644
--- a/spec/ruby/library/win32ole/win32ole/_getproperty_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/_getproperty_spec.rb
@@ -4,16 +4,16 @@
   require 'win32ole'
 
   describe "WIN32OLE#_getproperty" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
-    it "gets name" do
-      @ie._getproperty(0, [], []).should =~ /explorer/i
+    it "gets validateOnParse" do
+      @xml_dom._getproperty(65, [], []).should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/invoke_spec.rb b/spec/ruby/library/win32ole/win32ole/invoke_spec.rb
index 60c5cd59b6..ae2c8149c6 100644
--- a/spec/ruby/library/win32ole/win32ole/invoke_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/invoke_spec.rb
@@ -4,16 +4,16 @@
   require 'win32ole'
 
   describe "WIN32OLE#invoke" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
-    it "get name by invoking 'Name' OLE method" do
-      @ie.invoke('Name').should =~ /explorer/i
+    it "get name by invoking 'validateOnParse' OLE method" do
+      @xml_dom.invoke('validateOnParse').should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/ole_func_methods_spec.rb b/spec/ruby/library/win32ole/win32ole/ole_func_methods_spec.rb
index 8a510519f2..bd46cb5a19 100644
--- a/spec/ruby/library/win32ole/win32ole/ole_func_methods_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/ole_func_methods_spec.rb
@@ -4,24 +4,24 @@
   require 'win32ole'
 
   describe "WIN32OLE#ole_func_methods" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit if @ie
+    after :all do
+      @xml_dom =nil
     end
 
     it "raises ArgumentError if argument is given" do
-      lambda { @ie.ole_func_methods(1) }.should raise_error ArgumentError
+      lambda { @xml_dom.ole_func_methods(1) }.should raise_error ArgumentError
     end
 
     it "returns an array of WIN32OLE_METHODs" do
-      @ie.ole_func_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
+      @xml_dom.ole_func_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
     end
 
     it "contains a 'AddRef' method for Internet Explorer" do
-      @ie.ole_func_methods.map { |m| m.name }.include?('AddRef').should be_true
+      @xml_dom.ole_func_methods.map { |m| m.name }.include?('AddRef').should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/ole_methods_spec.rb b/spec/ruby/library/win32ole/win32ole/ole_methods_spec.rb
index 4f406a2ce8..afac3097c6 100644
--- a/spec/ruby/library/win32ole/win32ole/ole_methods_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/ole_methods_spec.rb
@@ -4,24 +4,24 @@
   require 'win32ole'
 
   describe "WIN32OLE#ole_methods" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises ArgumentError if argument is given" do
-      lambda { @ie.ole_methods(1) }.should raise_error ArgumentError
+      lambda { @xml_dom.ole_methods(1) }.should raise_error ArgumentError
     end
 
     it "returns an array of WIN32OLE_METHODs" do
-      @ie.ole_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
+      @xml_dom.ole_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
     end
 
-    it "contains a 'AddRef' method for Internet Explorer" do
-      @ie.ole_methods.map { |m| m.name }.include?('AddRef').should be_true
+    it "contains a 'validateOnParse' method for Internet Explorer" do
+      @xml_dom.ole_methods.map { |m| m.name }.include?('validateOnParse').should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/ole_obj_help_spec.rb b/spec/ruby/library/win32ole/win32ole/ole_obj_help_spec.rb
index cd2be503f0..07708c261e 100644
--- a/spec/ruby/library/win32ole/win32ole/ole_obj_help_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/ole_obj_help_spec.rb
@@ -4,20 +4,20 @@
   require 'win32ole'
 
   describe "WIN32OLE#ole_obj_help" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises ArgumentError if argument is given" do
-      lambda { @ie.ole_obj_help(1) }.should raise_error ArgumentError
+      lambda { @xml_dom.ole_obj_help(1) }.should raise_error ArgumentError
     end
 
     it "returns an instance of WIN32OLE_TYPE" do
-      @ie.ole_obj_help.kind_of?(WIN32OLE_TYPE).should be_true
+      @xml_dom.ole_obj_help.kind_of?(WIN32OLE_TYPE).should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/ole_put_methods_spec.rb b/spec/ruby/library/win32ole/win32ole/ole_put_methods_spec.rb
index a58bbc8afe..6133f0da1e 100644
--- a/spec/ruby/library/win32ole/win32ole/ole_put_methods_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole/ole_put_methods_spec.rb
@@ -4,24 +4,24 @@
   require 'win32ole'
 
   describe "WIN32OLE#ole_put_methods" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises ArgumentError if argument is given" do
-      lambda { @ie.ole_put_methods(1) }.should raise_error ArgumentError
+      lambda { @xml_dom.ole_put_methods(1) }.should raise_error ArgumentError
     end
 
     it "returns an array of WIN32OLE_METHODs" do
-      @ie.ole_put_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
+      @xml_dom.ole_put_methods.all? { |m| m.kind_of? WIN32OLE_METHOD }.should be_true
     end
 
-    it "contains a 'Height' method for Internet Explorer" do
-      @ie.ole_put_methods.map { |m| m.name }.include?('Height').should be_true
+    it "contains a 'preserveWhiteSpace' method" do
+      @xml_dom.ole_put_methods.map { |m| m.name }.include?('preserveWhiteSpace').should be_true
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/shared/ole_method.rb b/spec/ruby/library/win32ole/win32ole/shared/ole_method.rb
index 9fdb5f2055..4044b29508 100644
--- a/spec/ruby/library/win32ole/win32ole/shared/ole_method.rb
+++ b/spec/ruby/library/win32ole/win32ole/shared/ole_method.rb
@@ -4,35 +4,22 @@
   require 'win32ole'
 
   describe :win32ole_ole_method, shared: true do
-    before :each do
-      # This part is unstable, so retrying 3 times.
-      tries = 0
-      begin
-        @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
-      rescue WIN32OLERuntimeError => e
-        # WIN32OLERuntimeError: failed to create WIN32OLE object from `InternetExplorer.Application'
-        #     HRESULT error code:0x800704a6
-        #       A system shutdown has already been scheduled.
-        if tries < 3
-          tries += 1
-          $stderr.puts "win32ole_ole_method retry (#{tries}): #{e.class}: #{e.message}"
-          retry
-        end
-      end
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises ArgumentError if no argument is given" do
-      lambda { @ie.send(@method) }.should raise_error ArgumentError
+      lambda { @xml_dom.send(@method) }.should raise_error ArgumentError
     end
 
-    it "returns the WIN32OLE_METHOD 'Quit' if given 'Quit'" do
-      result = @ie.send(@method, "Quit")
+    it "returns the WIN32OLE_METHOD 'abort' if given 'abort'" do
+      result = @xml_dom.send(@method, "abort")
       result.kind_of?(WIN32OLE_METHOD).should be_true
-      result.name.should == 'Quit'
+      result.name.should == 'abort'
     end
   end
 end
diff --git a/spec/ruby/library/win32ole/win32ole/shared/setproperty.rb b/spec/ruby/library/win32ole/win32ole/shared/setproperty.rb
index f272da4b4e..d04bb452ae 100644
--- a/spec/ruby/library/win32ole/win32ole/shared/setproperty.rb
+++ b/spec/ruby/library/win32ole/win32ole/shared/setproperty.rb
@@ -4,21 +4,20 @@
   require 'win32ole'
 
   describe :win32ole_setproperty, shared: true do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises ArgumentError if no argument is given" do
-      lambda { @ie.send(@method) }.should raise_error ArgumentError
+      lambda { @xml_dom.send(@method) }.should raise_error ArgumentError
     end
 
-    it "sets height to 500 and returns nil" do
-      height = 500
-      result = @ie.send(@method, 'Height', height)
+    it "sets async true and returns nil" do
+      result = @xml_dom.send(@method, 'async', true)
       result.should == nil
     end
   end
diff --git a/spec/ruby/library/win32ole/win32ole_event/new_spec.rb b/spec/ruby/library/win32ole/win32ole_event/new_spec.rb
index bceaa737e1..0b02ce73b1 100644
--- a/spec/ruby/library/win32ole/win32ole_event/new_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole_event/new_spec.rb
@@ -4,12 +4,12 @@
   require 'win32ole'
 
   describe "WIN32OLE_EVENT.new" do
-    before :each do
-      @ie = WIN32OLESpecs.new_ole('InternetExplorer.Application')
+    before :all do
+      @xml_dom = WIN32OLESpecs.new_ole('MSXML.DOMDocument')
     end
 
-    after :each do
-      @ie.Quit if @ie
+    after :all do
+      @xml_dom = nil
     end
 
     it "raises TypeError given invalid argument" do
@@ -17,7 +17,7 @@
     end
 
     it "raises RuntimeError if event does not exist" do
-      lambda { WIN32OLE_EVENT.new(@ie, 'A') }.should raise_error RuntimeError
+      lambda { WIN32OLE_EVENT.new(@xml_dom, 'A') }.should raise_error RuntimeError
     end
 
     it "raises RuntimeError if OLE object has no events" do
@@ -26,7 +26,7 @@
     end
 
     it "creates WIN32OLE_EVENT object" do
-      ev = WIN32OLE_EVENT.new(@ie, 'DWebBrowserEvents')
+      ev = WIN32OLE_EVENT.new(@xml_dom)
       ev.should be_kind_of WIN32OLE_EVENT
     end
   end
diff --git a/spec/ruby/library/win32ole/win32ole_event/on_event_spec.rb b/spec/ruby/library/win32ole/win32ole_event/on_event_spec.rb
index 00b8fcc035..b9856de3b7 100644
--- a/spec/ruby/library/win32ole/win32ole_event/on_event_spec.rb
+++ b/spec/ruby/library/win32ole/win32ole_event/on_event_spec.rb
@@ -3,60 +3,60 @@
 platform_is :windows do
   require 'win32ole'
 
-  def default_handler(event, *args)
-    @event += event
+  def handler_global(event, *args)
+    @event_global += event
   end
 
-  def alternate_handler(event, *args)
-    @event2 = "alternate"
+  def handler_specific(*args)
+    @event_specific = "specific"
   end
 
-  def handler3(event, *args)
-    @event3 += event
+  def handler_spec_alt(*args)
+    @event_spec_alt = "spec_alt"
   end
 
-
-  describe "WIN32OLE_EVENT#on_event with no argument" do
+  describe "WIN32OLE_EVENT#on_event" do
     before :each do
-      @ie     = WIN32OLESpecs.new_ole('InternetExplorer.Application')
-      @ev     = WIN32OLE_EVENT.new(@ie, 'DWebBrowserEvents')
-      @event  = ''
-      @event2 = ''
-      @event3 = ''
-      @ie.StatusBar = true
+      @xml_dom = WIN32OLESpecs.new_ole 'MSXML.DOMDocument'
+      @ev      = WIN32OLE_EVENT.new @xml_dom
+      @event_global   = ''
+      @event_specific = ''
+      @event_spec_alt = ''
     end
 
     after :each do
-      @ie.Quit
+      @xml_dom = nil
+      @ev = nil
     end
 
-    it "sets event handler properly, and the handler is invoked by event loop" do
-      @ev.on_event { |*args| default_handler(*args) }
-      @ie.StatusText='hello'
+    it "sets global event handler properly, and the handler is invoked by event loop" do
+      @ev.on_event { |*args| handler_global(*args) }
+      @xml_dom.loadXML "<program><name>Ruby</name><version>trunk</version></program>"
       WIN32OLE_EVENT.message_loop
-      @event.should =~ /StatusTextChange/
+      @event_global.should =~ /onreadystatechange/
     end
 
     it "accepts a String argument, sets event handler properly, and the handler is invoked by event loop" do
-      @ev.on_event("StatusTextChange") { |*args| @event = 'foo' }
-      @ie.StatusText='hello'
+      @ev.on_event("onreadystatechange") { |*args| @event = 'foo' }
+      @xml_dom.loadXML "<program><name>Ruby</name><version>trunk</version></program>"
       WIN32OLE_EVENT.message_loop
       @event.should =~ /foo/
     end
 
-    it "registers multiple event handlers for the same event" do
-      @ev.on_event("StatusTextChange") { |*args| default_handler(*args) }
-      @ev.on_event("StatusTextChange") { |*args| alternate_handler(*args) }
-      @ie.StatusText= 'hello'
+    it "accepts a Symbol argument, sets event handler properly, and the handler is invoked by event loop" do
+      @ev.on_event(:onreadystatechange) { |*args| @event = 'bar' }
+      @xml_dom.loadXML "<program><name>Ruby</name><version>trunk</version></program>"
       WIN32OLE_EVENT.message_loop
-      @event2.should == 'alternate'
+      @event.should =~ /bar/
     end
 
-    it "accepts a Symbol argument, sets event handler properly, and the handler is invoked by event loop" do
-      @ev.on_event(:StatusTextChange) { |*args| @event = 'foo' }
-      @ie.StatusText='hello'
+    it "a specific event handler overrides a global event handler" do
+      @ev.on_event("onreadystatechange") { |*args| handler_specific(*args) }
+      @ev.on_event                       { |*args| handler_global(*args) }
+      @xml_dom.loadXML "<program><name>Ruby</name><version>trunk</version></program>"
       WIN32OLE_EVENT.message_loop
-      @event.should =~ /foo/
+      @event_global.should   == ''
+      @event_specific.should == 'specific'
     end
   end
 end
